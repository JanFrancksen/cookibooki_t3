generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String          @id @default(cuid())
    name           String?
    email          String?         @unique
    emailVerified  DateTime?
    role           Role            @default(User)
    image          String?
    accounts       Account[]
    sessions       Session[]
    writtenPosts   Post[]          @relation("writtenPosts")
    postId         String?
    writtenRecipes Recipe[]        @relation("writtenRecipes")
    recipeId       String?
    likedPosts     Post[]          @relation("likedPosts")
    likePostsId    String?
    likedRecipe    Recipe[]        @relation("likedRecipes")
    likeRecipeId   String?
    userPreference UserPreference?
}

model UserPreference {
    id           String   @id @default(uuid())
    emailUpdates Boolean?
    user         User     @relation(fields: [userId], references: [id])
    userId       String   @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        String   @id @default(cuid())
    title     String
    content   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    likes     Int      @default(0)
    author    User     @relation("writtenPosts", fields: [authorId], references: [id])
    authorId  String
    likedBy   User?    @relation("likedPosts", fields: [likedById], references: [id])
    likedById String?
}

model Recipe {
    id          String          @id @default(cuid())
    img         String
    title       String
    description String
    content     RecipeContent[]
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    likes       Int             @default(0)
    tag         Tag[]
    author      User            @relation("writtenRecipes", fields: [authorId], references: [id])
    authorId    String
    likedBy     User?           @relation("likedRecipes", fields: [likedById], references: [id])
    likedById   String?
    difficulty  Difficulty?
    timeNeeded  Int?
    ingredients Ingredients[]
}

model RecipeContent {
    id           Int     @id @default(autoincrement())
    title        String
    text         String
    image        String?
    partOfRecipe Recipe  @relation(fields: [recipeId], references: [id])
    recipeId     String
}

model Ingredients {
    id    String @id @default(cuid())
    title String

    image         String?
    recipe        Recipe[]
    inhaltsstoffe Inhaltsstoff[]
}

model Inhaltsstoff {
    id               String      @id @default(cuid())
    partOfIngredient Ingredients @relation(fields: [ingredientId], references: [id])
    ingredientId     String
    menge            Float
    einheit          String
    nutrient         Nutrient[]
}

model Nutrient {
    id                 String       @id @default(cuid())
    partOfInhaltsstoff Inhaltsstoff @relation(fields: [inhaltsstoffId], references: [id])
    inhaltsstoffId     String
    menge              Float
    einheit            String
}

model Tag {
    id     String   @id @default(uuid())
    name   String
    Recipe Recipe[]
}

enum Role {
    User
    Editor
    Admin
}

enum Difficulty {
    einfach
    mittel
    schwer
}
